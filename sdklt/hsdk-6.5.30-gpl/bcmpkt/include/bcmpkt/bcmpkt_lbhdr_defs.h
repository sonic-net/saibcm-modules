#ifndef BCMPKT_LBHDR_DEFS_H
#define BCMPKT_LBHDR_DEFS_H
/*******************************************************************************
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated from the registers file.
 * Edits to this file will be lost when it is regenerated.
 * Tool: INTERNAL/regs/xgs/generate-pmd.pl
 *
 * Copyright 2018-2024 Broadcom. All rights reserved.
 * The term 'Broadcom' refers to Broadcom Inc. and/or its subsidiaries.
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License 
 * version 2 as published by the Free Software Foundation.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * A copy of the GNU General Public License version 2 (GPLv2) can
 * be found in the LICENSES folder.
 *
 * This file provides field macros for the Packet Loopback HeaDeR (LBHDR, called
 * LOOPBACK_MH in hardware.) access.
 *
 ******************************************************************************/

/*!
 * \name Loopback module header field IDs.
 * \anchor BCMPKT_LBHDR_XXX
 */
/*! \{ */
/*! Invalid BCMPKT_LBHDR FID indicator */
#define BCMPKT_LBHDR_FID_INVALID                 -1
/*! Start of frame indicator. */
#define BCMPKT_LBHDR_START                       0
/*!
 * 64 Header Types Supported. 1 means Packets from CPU with SOBMH header format
 * to Passthru NLF
 */
#define BCMPKT_LBHDR_HEADER_TYPE                 1
/*!
 * Indicates the loopback COS queue and is used by the MMU for per
 * application group accounting for packets received from the internal
 * loopback port.  This must be put the PBI.INPUT_PRIORITY whenever the
 * source port is the loopback port.
 */
#define BCMPKT_LBHDR_INPUT_PRIORITY              2
/*! Pointer to CPU_PACKET_PROFILE_1/2 registers. */
#define BCMPKT_LBHDR_PKT_PROFILE                 3
/*! Triggers capture of intermediate packet processing result of this packet. */
#define BCMPKT_LBHDR_VISIBILITY_PKT              4
/*!
 * Source field for the packet.
 * Contents of this field are determined by value of SOURCE_TYPE.
 * SOURCE_TYPE=0x0:
 *   [15:0] SOURCE_VP
 * SOURCE_TYPE=0x1:
 *   [15:8] SRC_MODID
 *   [7:0]  SRC_PORT
 */
#define BCMPKT_LBHDR_SOURCE                      5
/*! Indicates contents of SOURCE field. 0x1: SGPP 0x0: SVP. */
#define BCMPKT_LBHDR_SOURCE_TYPE                 6
/*! CNG Bits */
#define BCMPKT_LBHDR_TRILL_AC_CNG                7
/*! Traffic class */
#define BCMPKT_LBHDR_TRILL_AC_TC                 8
/*! Do Not Learn Bit */
#define BCMPKT_LBHDR_TRILL_AC_DO_NOT_LEARN       9
/*! CNG Bits */
#define BCMPKT_LBHDR_TRILL_NW_CNG                10
/*! Traffic class */
#define BCMPKT_LBHDR_TRILL_NW_TC                 11
/*! Destination type (see encodings). Valid only if SUBFLOW_TYPE=CPU_TX_PROC. */
#define BCMPKT_LBHDR_ETH_DEST_TYPE               12
/*!
 * Destination based on DESTINATION_TYPE. (For ECMP/ECMP_MEMBER cases, this field
 * contains ECMP_GROUP_PTR). Valid only if SUBFLOW_TYPE=CPU_TX_PROC.
 */
#define BCMPKT_LBHDR_ETH_DEST                    13
/*! Drop precedence for the apcket. Valid only if SUBFLOW_TYPE=CPU_TX_PROC. */
#define BCMPKT_LBHDR_ETH_DP                      14
/*!
 * ECMP member ID for case where DESTINATION_TYPE=ECMP_MEMBER. Only valid for single
 * level ECMP. Valid only if SUBFLOW_TYPE=CPU_TX_PROC.
 */
#define BCMPKT_LBHDR_ETH_ECMP_MEMBER_ID          15
/*!
 * Internal Congestion to be used for the packet. Valid only if
 * SUBFLOW_TYPE=CPU_TX_PROC.
 */
#define BCMPKT_LBHDR_ETH_INT_CN                  16
/*!
 * Internal priority to be used for the packet. Valid only if
 * SUBFLOW_TYPE=CPU_TX_PROC.
 */
#define BCMPKT_LBHDR_ETH_INT_PRI                 17
/*!
 * Allows software to select load balancing bitmap for non-unicast packets.
 * valid only if MCAST_LB_INDEX_VLD=1.
 */
#define BCMPKT_LBHDR_ETH_MCAST_LB_INDEX          18
/*! If set, MCAST_LB_INDEX field is valid. */
#define BCMPKT_LBHDR_ETH_MCAST_LB_INDEX_VLD      19
/*!
 * Device Port Number which is to be used for processing packet in Ingress
 * Pipeline.
 */
#define BCMPKT_LBHDR_ETH_PP_PORT                 20
/*!
 * If set, the qos fields (INT, PRI, etc) are specified in the header and
 * override the pre-IFP assignment. Else, derived based on packet lookups.
 * Valid only if SUBFLOW_TYPE=CPU_TX_PROC.
 */
#define BCMPKT_LBHDR_ETH_QOS_FIELDS_VLD          21
/*!
 * Indicates whether packets should be treated as routed or bridged. Valid
 * only if SUBFLOW_TYPE=CPU_TX_PROC.
 */
#define BCMPKT_LBHDR_ETH_ROUTED_PKT              22
/*! Identifies sub-flow (see encodings). */
#define BCMPKT_LBHDR_ETH_SUBFLOW_TYPE            23
/*! VRF */
#define BCMPKT_LBHDR_ETHERNET_VRF                24
/*! VRF valid */
#define BCMPKT_LBHDR_ETHERNET_VRF_VALID          25
/*! MUST Always be 0 */
#define BCMPKT_LBHDR_ZERO                        26
/*!
 * Device Port Number which is to be used for processing packet in Ingress
 * Pipeline.
 */
#define BCMPKT_LBHDR_PP_PORT                     27
/*!
 * Indicates whether packets should be treated as routed or bridged. Valid
 * only if SUBFLOW_TYPE=CPU_TX_PROC.
 */
#define BCMPKT_LBHDR_ROUTED_PKT                  28
/*! VRF */
#define BCMPKT_LBHDR_VRF                         29
/*! VRF valid */
#define BCMPKT_LBHDR_VRF_VALID                   30
/*! Qos field valid */
#define BCMPKT_LBHDR_QOS_FIELD_VALID             31
/*! Opaque object */
#define BCMPKT_LBHDR_OPAQUE_OBJECT               32
/*! Qos field ethernet */
#define BCMPKT_LBHDR_QOS_FIELD_ETH               33
/*! Internal priority ethernet */
#define BCMPKT_LBHDR_INT_PRI_ETH                 34
/*! Internal CN ethernet */
#define BCMPKT_LBHDR_INT_CN_ETH                  35
/*! CNG ethernet */
#define BCMPKT_LBHDR_CNG_ETH                     36
/*!  */
#define BCMPKT_LBHDR_PKT_PROFILE_MD_ETH          37
/*!  */
#define BCMPKT_LBHDR_QOS_FIELD_VALID_MD_ETH      38
/*!  */
#define BCMPKT_LBHDR_PP_PORT_MD_ETH              39
/*!  */
#define BCMPKT_LBHDR_DESTINATION_MD_ETH          40
/*!  */
#define BCMPKT_LBHDR_SVTAG_TX_PRESENT_MD_ETH     41
/*!  */
#define BCMPKT_LBHDR_EXTENDED_DELETE_ENABLE_MD_ETH 42
/*!  */
#define BCMPKT_LBHDR_EXTENDED_DELETE_BYTE_COUNT_MD_ETH 43
/*!  */
#define BCMPKT_LBHDR_IFA_AT_OUTER_LAYER_MD_ETH   44
/*!  */
#define BCMPKT_LBHDR_OPAQUE_OBJECT_MD_ETH        45
/*!  */
#define BCMPKT_LBHDR_QOS_FIELD_ETH_MD_ETH        46
/*!  */
#define BCMPKT_LBHDR_INPUT_PRIORITY_MD_ETH       47
/*!  */
#define BCMPKT_LBHDR_CNP                         48
/*!  */
#define BCMPKT_LBHDR_FLIP_SECOND_PASS_L2_DENSE_MODE_ADDRESS 49
/*!  */
#define BCMPKT_LBHDR_VFI_VALID_MD_ETH            50
/*!  */
#define BCMPKT_LBHDR_VFI_MD_ETH                  51
/*!  */
#define BCMPKT_LBHDR_TRUNCATE_MD_ETH             52
/*!  */
#define BCMPKT_LBHDR_TRUNCATE_OFFSET_MD_ETH      53
/*!  */
#define BCMPKT_LBHDR_SVP_MD_ETH                  54
/*! LBHDR FIELD ID NUMBER */
#define BCMPKT_LBHDR_FID_COUNT                   55
/*! \} */

/*! LBHDR field name strings for debugging. */
#define BCMPKT_LBHDR_FIELD_NAME_MAP_INIT \
    {"START", BCMPKT_LBHDR_START},\
    {"HEADER_TYPE", BCMPKT_LBHDR_HEADER_TYPE},\
    {"INPUT_PRIORITY", BCMPKT_LBHDR_INPUT_PRIORITY},\
    {"PKT_PROFILE", BCMPKT_LBHDR_PKT_PROFILE},\
    {"VISIBILITY_PKT", BCMPKT_LBHDR_VISIBILITY_PKT},\
    {"SOURCE", BCMPKT_LBHDR_SOURCE},\
    {"SOURCE_TYPE", BCMPKT_LBHDR_SOURCE_TYPE},\
    {"TRILL_AC::CNG", BCMPKT_LBHDR_TRILL_AC_CNG},\
    {"TRILL_AC::TC", BCMPKT_LBHDR_TRILL_AC_TC},\
    {"TRILL_AC::DO_NOT_LEARN", BCMPKT_LBHDR_TRILL_AC_DO_NOT_LEARN},\
    {"TRILL_NW::CNG", BCMPKT_LBHDR_TRILL_NW_CNG},\
    {"TRILL_NW::TC", BCMPKT_LBHDR_TRILL_NW_TC},\
    {"ETH::DEST_TYPE", BCMPKT_LBHDR_ETH_DEST_TYPE},\
    {"ETH::DEST", BCMPKT_LBHDR_ETH_DEST},\
    {"ETH::DP", BCMPKT_LBHDR_ETH_DP},\
    {"ETH::ECMP_MEMBER_ID", BCMPKT_LBHDR_ETH_ECMP_MEMBER_ID},\
    {"ETH::INT_CN", BCMPKT_LBHDR_ETH_INT_CN},\
    {"ETH::INT_PRI", BCMPKT_LBHDR_ETH_INT_PRI},\
    {"ETH::MCAST_LB_INDEX", BCMPKT_LBHDR_ETH_MCAST_LB_INDEX},\
    {"ETH::MCAST_LB_INDEX_VLD", BCMPKT_LBHDR_ETH_MCAST_LB_INDEX_VLD},\
    {"ETH::PP_PORT", BCMPKT_LBHDR_ETH_PP_PORT},\
    {"ETH::QOS_FIELDS_VLD", BCMPKT_LBHDR_ETH_QOS_FIELDS_VLD},\
    {"ETH::ROUTED_PKT", BCMPKT_LBHDR_ETH_ROUTED_PKT},\
    {"ETH::SUBFLOW_TYPE", BCMPKT_LBHDR_ETH_SUBFLOW_TYPE},\
    {"ETHERNET::VRF", BCMPKT_LBHDR_ETHERNET_VRF},\
    {"ETHERNET::VRF_VALID", BCMPKT_LBHDR_ETHERNET_VRF_VALID},\
    {"ZERO", BCMPKT_LBHDR_ZERO},\
    {"PP_PORT", BCMPKT_LBHDR_PP_PORT},\
    {"ROUTED_PKT", BCMPKT_LBHDR_ROUTED_PKT},\
    {"VRF", BCMPKT_LBHDR_VRF},\
    {"VRF_VALID", BCMPKT_LBHDR_VRF_VALID},\
    {"QOS_FIELD_VALID", BCMPKT_LBHDR_QOS_FIELD_VALID},\
    {"OPAQUE_OBJECT", BCMPKT_LBHDR_OPAQUE_OBJECT},\
    {"QOS_FIELD_ETH", BCMPKT_LBHDR_QOS_FIELD_ETH},\
    {"INT_PRI_ETH", BCMPKT_LBHDR_INT_PRI_ETH},\
    {"INT_CN_ETH", BCMPKT_LBHDR_INT_CN_ETH},\
    {"CNG_ETH", BCMPKT_LBHDR_CNG_ETH},\
    {"PKT_PROFILE_MD_ETH", BCMPKT_LBHDR_PKT_PROFILE_MD_ETH},\
    {"QOS_FIELD_VALID_MD_ETH", BCMPKT_LBHDR_QOS_FIELD_VALID_MD_ETH},\
    {"PP_PORT_MD_ETH", BCMPKT_LBHDR_PP_PORT_MD_ETH},\
    {"DESTINATION_MD_ETH", BCMPKT_LBHDR_DESTINATION_MD_ETH},\
    {"SVTAG_TX_PRESENT_MD_ETH", BCMPKT_LBHDR_SVTAG_TX_PRESENT_MD_ETH},\
    {"EXTENDED_DELETE_ENABLE_MD_ETH", BCMPKT_LBHDR_EXTENDED_DELETE_ENABLE_MD_ETH},\
    {"EXTENDED_DELETE_BYTE_COUNT_MD_ETH", BCMPKT_LBHDR_EXTENDED_DELETE_BYTE_COUNT_MD_ETH},\
    {"IFA_AT_OUTER_LAYER_MD_ETH", BCMPKT_LBHDR_IFA_AT_OUTER_LAYER_MD_ETH},\
    {"OPAQUE_OBJECT_MD_ETH", BCMPKT_LBHDR_OPAQUE_OBJECT_MD_ETH},\
    {"QOS_FIELD_ETH_MD_ETH", BCMPKT_LBHDR_QOS_FIELD_ETH_MD_ETH},\
    {"INPUT_PRIORITY_MD_ETH", BCMPKT_LBHDR_INPUT_PRIORITY_MD_ETH},\
    {"CNP", BCMPKT_LBHDR_CNP},\
    {"FLIP_SECOND_PASS_L2_DENSE_MODE_ADDRESS", BCMPKT_LBHDR_FLIP_SECOND_PASS_L2_DENSE_MODE_ADDRESS},\
    {"VFI_VALID_MD_ETH", BCMPKT_LBHDR_VFI_VALID_MD_ETH},\
    {"VFI_MD_ETH", BCMPKT_LBHDR_VFI_MD_ETH},\
    {"TRUNCATE_MD_ETH", BCMPKT_LBHDR_TRUNCATE_MD_ETH},\
    {"TRUNCATE_OFFSET_MD_ETH", BCMPKT_LBHDR_TRUNCATE_OFFSET_MD_ETH},\
    {"SVP_MD_ETH", BCMPKT_LBHDR_SVP_MD_ETH},\
    {"fid count", BCMPKT_LBHDR_FID_COUNT}

/*!
 * \name BCMPKT_LBHDR_HEADER_TYPE encodings.
 * \anchor BCMPKT_LBHDR_HEADER_TYPE_XXX
 */
/*! \{ */
/*! MinM, L2GRE and VXLAN tunnel terminated packet */
#define BCMPKT_LBHDR_HEADER_T_TUNNEL_TERM        0
/*! Trill Network Packets to Passthru NLF */
#define BCMPKT_LBHDR_HEADER_T_TRILL_NW           1
/*! Trill Access Layer Packets to Passthru NLF */
#define BCMPKT_LBHDR_HEADER_T_TRILL_AC           2
/*! Process as if it was received on front panel port. */
#define BCMPKT_LBHDR_HEADER_T_ETHERNET           3
/*! MAC in MAC packets to Passthru NLF */
#define BCMPKT_LBHDR_HEADER_T_MIM                4
/*! QCN Packets to Passthru NLF */
#define BCMPKT_LBHDR_HEADER_T_QCN                5
/*! Generic loopback */
#define BCMPKT_LBHDR_HEADER_T_GENERIC            6
/*! LB Hdr type ETH */
#define BCMPKT_LBHDR_HEADER_T_LOOPBACK_MH        7
/*! Transport header */
#define BCMPKT_LBHDR_HEADER_T_TRANSPORT          7
/*! \} */

/*! BCMPKT_LBHDR_HEADER_TYPE encoding name strings for debugging. */
#define BCMPKT_LBHDR_HEADER_TYPE_NAME_MAP_INIT \
    {"TUNNEL_TERM", BCMPKT_LBHDR_HEADER_T_TUNNEL_TERM},\
    {"TRILL_NW", BCMPKT_LBHDR_HEADER_T_TRILL_NW},\
    {"TRILL_AC", BCMPKT_LBHDR_HEADER_T_TRILL_AC},\
    {"ETHERNET", BCMPKT_LBHDR_HEADER_T_ETHERNET},\
    {"MIM", BCMPKT_LBHDR_HEADER_T_MIM},\
    {"QCN", BCMPKT_LBHDR_HEADER_T_QCN},\
    {"GENERIC", BCMPKT_LBHDR_HEADER_T_GENERIC},\
    {"LOOPBACK_MH", BCMPKT_LBHDR_HEADER_T_LOOPBACK_MH},\
    {"TRANSPORT", BCMPKT_LBHDR_HEADER_T_TRANSPORT},\

/*!
 * \name BCMPKT_LBHDR_ETH_DEST_TYPE encodings.
 * \anchor BCMPKT_LBHDR_ETH_DEST_TYPE_XXX
 */
/*! \{ */
/*!
 * Destination GLP. Note that despite the name, only physical ports (DGPP)
 * are supported. Trunking is not supported.
 */
#define BCMPKT_LBHDR_ETH_DEST_T_DGLP             0
/*! Next hop */
#define BCMPKT_LBHDR_ETH_DEST_T_NHI              1
/*! ECMP group */
#define BCMPKT_LBHDR_ETH_DEST_T_ECMP             2
/*! ECMP member */
#define BCMPKT_LBHDR_ETH_DEST_T_ECMP_MEMBER      3
/*! IPMC */
#define BCMPKT_LBHDR_ETH_DEST_T_IPMC             4
/*! L2MC */
#define BCMPKT_LBHDR_ETH_DEST_T_L2MC             5
/*! Vlan flooding */
#define BCMPKT_LBHDR_ETH_DEST_T_VLAN_FLOOD       6
/*! \} */

/*! BCMPKT_LBHDR_ETH_DEST_TYPE encoding name strings for debugging. */
#define BCMPKT_LBHDR_ETH_DEST_TYPE_NAME_MAP_INIT \
    {"DGLP", BCMPKT_LBHDR_ETH_DEST_T_DGLP},\
    {"NHI", BCMPKT_LBHDR_ETH_DEST_T_NHI},\
    {"ECMP", BCMPKT_LBHDR_ETH_DEST_T_ECMP},\
    {"ECMP_MEMBER", BCMPKT_LBHDR_ETH_DEST_T_ECMP_MEMBER},\
    {"IPMC", BCMPKT_LBHDR_ETH_DEST_T_IPMC},\
    {"L2MC", BCMPKT_LBHDR_ETH_DEST_T_L2MC},\
    {"VLAN_FLOOD", BCMPKT_LBHDR_ETH_DEST_T_VLAN_FLOOD},\

/*!
 * \name BCMPKT_LBHDR_ETH_SUBFLOW_TYPE encodings.
 * \anchor BCMPKT_LBHDR_ETH_SUBFLOW_TYPE_XXX
 */
/*! \{ */
/*! CPU masquerade flow */
#define BCMPKT_LBHDR_ETH_SUBFLOW_T_CPU_MASQUERADE 0
/*! CPU_TX_PROC */
#define BCMPKT_LBHDR_ETH_SUBFLOW_T_CPU_TX_PROC   1
/*! \} */

/*! BCMPKT_LBHDR_ETH_SUBFLOW_TYPE encoding name strings for debugging. */
#define BCMPKT_LBHDR_ETH_SUBFLOW_TYPE_NAME_MAP_INIT \
    {"CPU_MASQUERADE", BCMPKT_LBHDR_ETH_SUBFLOW_T_CPU_MASQUERADE},\
    {"CPU_TX_PROC", BCMPKT_LBHDR_ETH_SUBFLOW_T_CPU_TX_PROC},\

/*!
 * \name Loopback module header internal usage field IDs.
 * \anchor BCMPKT_LBHDR_I_XXX
 */
/*! \{ */
/*! Invalid BCMPKT_LBHDR_I FID indicator */
#define BCMPKT_LBHDR_I_FID_INVALID               -1
/*! LBHDR RX raw data size. */
#define BCMPKT_LBHDR_I_SIZE                      0
/*! LBHDR_I FIELD ID NUMBER */
#define BCMPKT_LBHDR_I_FID_COUNT                 1
/*! \} */

/*! LBHDR_I field name strings for debugging. */
#define BCMPKT_LBHDR_I_FIELD_NAME_MAP_INIT \
    {"SIZE", BCMPKT_LBHDR_I_SIZE},\
    {"fid count", BCMPKT_LBHDR_I_FID_COUNT}

#endif /*! BCMPKT_LBHDR_DEFS_H */
