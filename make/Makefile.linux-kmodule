# $Id: Makefile.linux-kmodule-3_6,v 1.2 Broadcom SDK $
# $Copyright: 2017-2024 Broadcom Inc. All rights reserved.
# 
# Permission is granted to use, copy, modify and/or distribute this
# software under either one of the licenses below.
# 
# License Option 1: GPL
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2, as
# published by the Free Software Foundation (the "GPL").
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License version 2 (GPLv2) for more details.
# 
# You should have received a copy of the GNU General Public License
# version 2 (GPLv2) along with this source code.
# 
# 
# License Option 2: Broadcom Open Network Switch APIs (OpenNSA) license
# 
# This software is governed by the Broadcom Open Network Switch APIs license:
# https://www.broadcom.com/products/ethernet-connectivity/software/opennsa $
# 
# 

# Due to the extensive use of driver libraries, the SDK usually builds
# kernel modules from a precompiled object. To avoid various warnings
# and conflicts, the pre-compiled object must be named differently
# from the target module, and the object file itself should be
# appended with "_shipped".

# If a module exports any symbols, then the exporting source file must
# be compiled within the kernel source tree for correct generation of
# module symbol versions. The symbol source file should be passed to
# this Makefile via the MODULE_SYM variable.

#
# Do not remove this assignment of LOCALDIR.
# It is used as an input flag for Make.config
LOCALDIR = .
MODULE := $(MOD_NAME).o
KMODULE := $(MOD_NAME).ko
obj-m := $(MODULE)

# Get CFGFLAGS, but ignore CFLAGS
include $(SDK)/make/Make.config
CFLAGS :=

ifeq (1,$(NO_PRECOMPILED_MODULE))
# {
#
# When compiling the module within the kernel environment, we get plenty of warnings
# of pointer-to-int and the other way round. So, we need to silence them.
# Apart from that, we need a search path on the kernel's 'include' and the various
# SDK 'include' directories. 
#
ccflags-y   := \
  -Wno-pointer-to-int-cast \
  -Wno-int-to-pointer-cast \
  -I$(SDK)/include \
  -I$(SDK)/systems/bde/linux/include \
  -I$(SDK)/systems/bde/shared/include \
  -I$(SDK)/systems/linux/kernel/modules/include

#
# For compilation of all module files in Linux environment, make sure
# all configuration flags (CFGFLAGS) are passed to the module. This
# was not required when a 'precompiled' object was used since it
# automatically got all these flags.
#
ccflags-y += $(CFGFLAGS) $(LKM_BUILD_INFO)

# Required for older kernels
export EXTRA_CFLAGS := $(ccflags-y)

#
# Reach here if this makefile is invoked
#   from systems\bde\linux\kernel (module name: linux-kernel-bde.ko).
#   from systems\bde\linux\user\kernel (module name: linux-user.ko)
#   from systems/linux/kernel/modules/bcm-knet (module name: linux-bcm-knet)
#   from systems/linux/kernel/modules/knet-cb (module name: linux-knet-cb)
$(MOD_NAME)-y := $(MOD_OBJS)
# }
else
# {
PRE_COMPILED_OBJ := obj_$(MOD_NAME).o
$(MOD_NAME)-y := $(MODULE_SYM) $(PRE_COMPILED_OBJ)
# }
endif

#
# Note that PWD will get two values, in the process of making the module,
# one for the current directory within 'build' and one for the 'base' of the kernel.
#
PWD := $(shell pwd)

ifneq ($(ARCH),)
# ELDK does not seem to `automatically' define ARCH where other gccs may
A := ARCH=$(ARCH)
export ARCH
endif

ifeq (,$(CROSS_COMPILE))
export CROSS_COMPILE
endif

# Provide an option in case kernel was built in separate directory
KERNBLDDIR ?= $(KERNDIR)

#
# If, for any reason, the definition of LD was erased, then
# set it, again.
#
ifeq ($(LD),)
LD = $(CROSS_COMPILE)ld
endif

ifeq (1,$(NO_PRECOMPILED_MODULE))
# {
$(KMODULE):
	rm -f *.o *.ko .*.cmd *.sig *.P
	rm -fr .tmp_versions
	if [ ! -f $(KERNBLDDIR)/NO_SUPRESS ]; then echo "# suppress warning" > .$(PRE_COMPILED_OBJ).cmd; fi
	#
	# This make creates the module's object. It, somehow, runs two cycls, one in SDK environment
	# and one in the kernel's directory.
	#
	$(MAKE) -C $(KERNBLDDIR) CROSS_COMPILE=$(CROSS_COMPILE) LD=$(LD) M=$(PWD) \
		quiet=$(quiet) KBUILD_VERBOSE=$(KBUILD_VERBOSE) modules
	if [ ! -f Module.symvers ]; then echo "old kernel (pre-2.6.17)" > Module.symvers; fi
	cp -f $(KMODULE) $(LIBDIR)
# }
else
# {
# The precopiled object needs a dummy command file to avoid warnings
# from the Kbuild scripts (modpost stage).
# Kernels before 2.6.17 do not support external module symbols files,
# so we create a dummy to prevent build failures.
#
$(KMODULE):
	rm -f *.o *.ko .*.cmd
	rm -fr .tmp_versions
	ln -s $(LIBDIR)/$(MODULE) $(PRE_COMPILED_OBJ)_shipped
	if [ ! -f $(KERNBLDDIR)/NO_SUPRESS ]; then echo "# suppress warning" > .$(PRE_COMPILED_OBJ).cmd; fi
	$(MAKE) -C $(KERNBLDDIR) CROSS_COMPILE=$(CROSS_COMPILE) M=$(PWD) modules
	if [ ! -f Module.symvers ]; then echo "old kernel (pre-2.6.17)" > Module.symvers; fi
	cp -f $(KMODULE) $(LIBDIR)
	rm -f $(PRE_COMPILED_OBJ)_shipped
# }
endif
